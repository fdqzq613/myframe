server:
  port: 8781

spring:
  application:
    name: cloud-order
  #redis集群
  redis:
    host: 192.168.20.138
    password: 123456
    port: 6379
    database: 0
    timeout: 60s  # 数据库连接超时时间，2.0 中该参数的类型为Duration，这里在配置的时候需要指明单位
    # 连接池配置，2.0中直接使用jedis或者lettuce配置连接池
    lettuce:
      pool:
        max-active: 8 # 连接池最大连接数（使用负值表示没有限制）默认 8
        max-wait: 5s # 连接池最大阻塞等待时间（使用负值表示没有限制）默认 -1
        max-idle: 8 # 连接池中的最大空闲连接默认 8
        min-idle: 1 # 连接池中的最小空闲连接默认 0


  ####MQ
  cloud:
    stream:
      rabbit:
        bindings:
          kc-finish-input:
            consumer:
              acknowledge-mode: manual #要在这配置
              exchangeType: topic  #默认是topic
              #bindingRoutingKey: #
              bindingRoutingKey: kc-lock-finish-key # 设置一个RoutingKey信息 注意一旦创建了就生效了  后续修改会再产生一个，导致多个
          kc-output:
            producer:
              ttl: 3000 #消息3秒不消费转入私信队列
              autoBindDlq: true #启动私信队列
              deadLetterExchange: delay.order.input #绑定exchange
              deadLetterQueueName: delay.order.input.delay-order #死信队列名字：exchanName.queueName
              exchangeType: topic
              routingKeyExpression: '''kc-lock-key'''
              #routingKeyExpression: headers['name'] # 一个动态的基于name做路由
          delay-order-input:
            consumer:
              acknowledge-mode: manual #要在这配置
              exchangeType: topic  #默认是topic
              bindingRoutingKey: some.#
      defaultBinder: local_rabbit
      bindings:
        kc-finish-input:  #通道的名称
          destination: some.kc.finish #Exchange 名称 要和output的destination一致, 这样才能将队列和写入消息的exchange关联起来
          binder: local_rabbit #对应virtual-host
          group: kc-finish-Consumers #创建组里确保只有一个消费者只消费一次 # 拥有 group 默认会持久化队列
        kc-output: #通道的名称
          destination: some.kc.pre
          binder: local_rabbit
          group: kc-pre-Consumers
          producer:
            requiredGroups: kc-pre-Consumers
        delay-order-input:
          destination: delay.order.input
          binder: local_rabbit
          group: delay-order

            #producer:
          # exchangeType: topic
          #routingKeyExpression: headers.name # 一个动态的基于name做路由
      binders:
        local_rabbit:
          type: rabbit
          environment:
            spring:
              rabbitmq:
                host: 127.0.0.1
                port: 5672
                username: guest
                password: guest
                virtual-host: /


  ##数据库
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driverClassName: com.mysql.jdbc.Driver
    url: jdbc:mysql://127.0.0.1:3396/demo?useUnicode=true&characterEncoding=utf8&useOldAliasMetadataBehavior=true&useSSL=false
    username: root
    password: 123456
    initialize: false
    sqlScriptEncoding: UTF-8
    initialSize: 5
    minIdle: 5
    maxActive: 10
    maxWait: 60000
    timeBetweenEvictionRunsMillis: 600000
    minEvictableIdleTimeMillis: 3000000
    validationQuery: SELECT 1 FROM DUAL
    testWhileIdle: true  #在检查闲置连接时同时检查连接可用性
    testOnBorrow: false
    testOnReturn: false
    poolPreparedStatements: true
    maxPoolPreparedStatementPerConnectionSize: 20
    filters: stat,wall,logback

##mybatis-plus
mybatis-plus:
  mapper-locations: classpath:/**/*Mapper.xml
  type-aliases-package: com.some.order.domain
  # 数据库相关配置
  global-config:
    #主键类型  AUTO:"数据库ID自增", INPUT:"用户输入ID",ID_WORKER:"全局唯一ID (数字类型唯一ID)", UUID:"全局唯一ID UUID";
    id-type: ID_WORKER
    #字段策略 IGNORED:"忽略判断",NOT_NULL:"非 NULL 判断"),NOT_EMPTY:"非空判断"
    field-strategy: not_empty
    #驼峰下划线转换
    column-underline: true
    #数据库大写下划线转换
    #capital-mode: true
    #逻辑删除配置
    logic-delete-value: 0
    logic-not-delete-value: 1
    db-type: mysql

  #刷新mapper 调试神器
  refresh: true
  # 原生配置
  configuration:
    map-underscore-to-camel-case: true
    cache-enabled: false
    # 配置slq打印日志
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
#熔断
hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            #目前有两个容器实例，单个请求超时5s,+重试>10s，超15s则熔断
            timeoutInMilliseconds: 15000
        timeout:
          enabled: true

#Eureka 相关配置
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8085/eureka/
  # 是否从其他的服务中心同步服务列表
      fetch-registry: true
  # 是否把自己作为服务注册到其他服务注册中心
      register-with-eureka: false


